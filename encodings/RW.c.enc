@@PTR_TYPE
int

@@INIT
p_g = HAVOC_INT;
HEAP_TYPE _ttt = HAVOC_HEAP;
assert(W(0, defObj));

@@GLOBAL_DECLS
int allocCtr = 0;
unsigned int cnt = 0;
unsigned int last_cnt = 0;
int p_g;
HEAP_TYPE defObj;

@@PREDICATE
R(int cnt, int last_cnt)

@@PREDICATE
W(int last_cnt, HEAP_TYPE o)

@@READ_FN
HEAP_TYPE read(PTR_TYPE p) {
  HEAP_TYPE result;
  int t;
  ++cnt;
  if (p_g == p) {
    assert(R(cnt, last_cnt));
    t = last_cnt;
  } else {
    t = HAVOC_INT;
    assume(R(cnt, t));
  }
  result = HAVOC_HEAP;
  assume(W(t, result));
  return result;
}

@@WRITE_FN
void write(PTR_TYPE p, HEAP_TYPE e) {
  ++cnt;
  if (0 < p && p <= allocCtr) {
    assert(W(cnt, e));
    if (p_g == p) { last_cnt = cnt; }
  }
}

@@ALLOC_FN
int alloc(HEAP_TYPE e) {
  int p = ++allocCtr;
  ++cnt;
  assert(W(cnt, e));
  if (p_g == p) { last_cnt = cnt; }
  return p;
}